{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../../services/name-data.service\";\nimport * as i2 from \"@angular/common\";\nfunction NameTableComponent_tr_8_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"tr\", 2)(1, \"td\");\n    i0.ɵɵtext(2);\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(3, \"td\");\n    i0.ɵɵtext(4);\n    i0.ɵɵelementEnd()();\n  }\n  if (rf & 2) {\n    const entry_r1 = ctx.$implicit;\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.getRowClass(entry_r1.count));\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(entry_r1.name);\n    i0.ɵɵadvance(2);\n    i0.ɵɵtextInterpolate(entry_r1.count);\n  }\n}\nexport class NameTableComponent {\n  constructor(nameDataService) {\n    this.nameDataService = nameDataService;\n    this.nameCounts = [];\n  }\n  ngOnInit() {\n    this.nameDataService.getNames().subscribe(names => {\n      const nameCountMap = new Map();\n      names.forEach(name => {\n        if (nameCountMap.has(name)) {\n          nameCountMap.set(name, nameCountMap.get(name) + 1);\n        } else {\n          nameCountMap.set(name, 1);\n        }\n      });\n      this.nameCounts = Array.from(nameCountMap.entries()).map(entry => ({\n        name: entry[0],\n        count: entry[1]\n      }));\n    });\n  }\n  getRowClass(count) {\n    if (count > 0 && count < 3) {\n      return 'red';\n    } else if (count >= 3 && count < 10) {\n      return 'yellow';\n    } else if (count >= 10) {\n      return 'green';\n    } else {\n      return '';\n    }\n  }\n  static #_ = this.ɵfac = function NameTableComponent_Factory(t) {\n    return new (t || NameTableComponent)(i0.ɵɵdirectiveInject(i1.NameDataService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: NameTableComponent,\n    selectors: [[\"app-name-table\"]],\n    decls: 9,\n    vars: 1,\n    consts: [[\"border\", \"1\"], [3, \"ngClass\", 4, \"ngFor\", \"ngForOf\"], [3, \"ngClass\"]],\n    template: function NameTableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"table\", 0)(1, \"thead\")(2, \"tr\")(3, \"th\");\n        i0.ɵɵtext(4, \"Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"th\");\n        i0.ɵɵtext(6, \"Occurrences\");\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(7, \"tbody\");\n        i0.ɵɵtemplate(8, NameTableComponent_tr_8_Template, 5, 3, \"tr\", 1);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngForOf\", ctx.nameCounts);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgForOf],\n    styles: [\".red[_ngcontent-%COMP%] {\\n    background-color: red;\\n  }\\n  \\n  .yellow[_ngcontent-%COMP%] {\\n    background-color: yellow;\\n  }\\n  \\n  .green[_ngcontent-%COMP%] {\\n    background-color: green;\\n  }\\n  \\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29tcG9uZW50cy9uYW1lLXRhYmxlL25hbWUtdGFibGUuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLHFCQUFxQjtFQUN2Qjs7RUFFQTtJQUNFLHdCQUF3QjtFQUMxQjs7RUFFQTtJQUNFLHVCQUF1QjtFQUN6QiIsInNvdXJjZXNDb250ZW50IjpbIi5yZWQge1xyXG4gICAgYmFja2dyb3VuZC1jb2xvcjogcmVkO1xyXG4gIH1cclxuICBcclxuICAueWVsbG93IHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IHllbGxvdztcclxuICB9XHJcbiAgXHJcbiAgLmdyZWVuIHtcclxuICAgIGJhY2tncm91bmQtY29sb3I6IGdyZWVuO1xyXG4gIH1cclxuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["i0","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ctx_r0","getRowClass","entry_r1","count","ɵɵadvance","ɵɵtextInterpolate","name","NameTableComponent","constructor","nameDataService","nameCounts","ngOnInit","getNames","subscribe","names","nameCountMap","Map","forEach","has","set","get","Array","from","entries","map","entry","_","ɵɵdirectiveInject","i1","NameDataService","_2","selectors","decls","vars","consts","template","NameTableComponent_Template","rf","ctx","ɵɵtemplate","NameTableComponent_tr_8_Template"],"sources":["D:\\interviewCode\\tablestyling\\src\\app\\components\\name-table\\name-table.component.ts","D:\\interviewCode\\tablestyling\\src\\app\\components\\name-table\\name-table.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { NameDataService } from '../../services/name-data.service';\n\ninterface NameCount {\n  name: string;\n  count: number;\n}\n\n@Component({\n  selector: 'app-name-table',\n  templateUrl: './name-table.component.html',\n  styleUrls: ['./name-table.component.css']\n})\nexport class NameTableComponent implements OnInit {\n  nameCounts: NameCount[] = [];\n\n  constructor(private nameDataService: NameDataService) { }\n\n  ngOnInit(): void {\n    this.nameDataService.getNames().subscribe(names => {\n      const nameCountMap = new Map<string, number>();\n\n      names.forEach(name => {\n        if (nameCountMap.has(name)) {\n          nameCountMap.set(name, nameCountMap.get(name)! + 1);\n        } else {\n          nameCountMap.set(name, 1);\n        }\n      });\n\n      this.nameCounts = Array.from(nameCountMap.entries()).map(entry => ({\n        name: entry[0],\n        count: entry[1]\n      }));\n    });\n  }\n\n  getRowClass(count: number): string {\n    if (count > 0 && count < 3) {\n      return 'red';\n    } else if (count >= 3 && count < 10) {\n      return 'yellow';\n    } else if (count >= 10) {\n      return 'green';\n    } else {\n      return '';\n    }\n  }\n}\n","<table border=\"1\">\n    <thead>\n      <tr>\n        <th>Name</th>\n        <th>Occurrences</th>\n      </tr>\n    </thead>\n    <tbody>\n      <tr *ngFor=\"let entry of nameCounts\" [ngClass]=\"getRowClass(entry.count)\">\n        <td>{{ entry.name }}</td>\n        <td>{{ entry.count }}</td>\n      </tr>\n    </tbody>\n  </table>\n  "],"mappings":";;;;;ICQMA,EAAA,CAAAC,cAAA,YAA0E;IACpED,EAAA,CAAAE,MAAA,GAAgB;IAAAF,EAAA,CAAAG,YAAA,EAAK;IACzBH,EAAA,CAAAC,cAAA,SAAI;IAAAD,EAAA,CAAAE,MAAA,GAAiB;IAAAF,EAAA,CAAAG,YAAA,EAAK;;;;;IAFSH,EAAA,CAAAI,UAAA,YAAAC,MAAA,CAAAC,WAAA,CAAAC,QAAA,CAAAC,KAAA,EAAoC;IACnER,EAAA,CAAAS,SAAA,GAAgB;IAAhBT,EAAA,CAAAU,iBAAA,CAAAH,QAAA,CAAAI,IAAA,CAAgB;IAChBX,EAAA,CAAAS,SAAA,GAAiB;IAAjBT,EAAA,CAAAU,iBAAA,CAAAH,QAAA,CAAAC,KAAA,CAAiB;;;ADG7B,OAAM,MAAOI,kBAAkB;EAG7BC,YAAoBC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;IAFnC,KAAAC,UAAU,GAAgB,EAAE;EAE4B;EAExDC,QAAQA,CAAA;IACN,IAAI,CAACF,eAAe,CAACG,QAAQ,EAAE,CAACC,SAAS,CAACC,KAAK,IAAG;MAChD,MAAMC,YAAY,GAAG,IAAIC,GAAG,EAAkB;MAE9CF,KAAK,CAACG,OAAO,CAACX,IAAI,IAAG;QACnB,IAAIS,YAAY,CAACG,GAAG,CAACZ,IAAI,CAAC,EAAE;UAC1BS,YAAY,CAACI,GAAG,CAACb,IAAI,EAAES,YAAY,CAACK,GAAG,CAACd,IAAI,CAAE,GAAG,CAAC,CAAC;SACpD,MAAM;UACLS,YAAY,CAACI,GAAG,CAACb,IAAI,EAAE,CAAC,CAAC;;MAE7B,CAAC,CAAC;MAEF,IAAI,CAACI,UAAU,GAAGW,KAAK,CAACC,IAAI,CAACP,YAAY,CAACQ,OAAO,EAAE,CAAC,CAACC,GAAG,CAACC,KAAK,KAAK;QACjEnB,IAAI,EAAEmB,KAAK,CAAC,CAAC,CAAC;QACdtB,KAAK,EAAEsB,KAAK,CAAC,CAAC;OACf,CAAC,CAAC;IACL,CAAC,CAAC;EACJ;EAEAxB,WAAWA,CAACE,KAAa;IACvB,IAAIA,KAAK,GAAG,CAAC,IAAIA,KAAK,GAAG,CAAC,EAAE;MAC1B,OAAO,KAAK;KACb,MAAM,IAAIA,KAAK,IAAI,CAAC,IAAIA,KAAK,GAAG,EAAE,EAAE;MACnC,OAAO,QAAQ;KAChB,MAAM,IAAIA,KAAK,IAAI,EAAE,EAAE;MACtB,OAAO,OAAO;KACf,MAAM;MACL,OAAO,EAAE;;EAEb;EAAC,QAAAuB,CAAA,G;qBAlCUnB,kBAAkB,EAAAZ,EAAA,CAAAgC,iBAAA,CAAAC,EAAA,CAAAC,eAAA;EAAA;EAAA,QAAAC,EAAA,G;UAAlBvB,kBAAkB;IAAAwB,SAAA;IAAAC,KAAA;IAAAC,IAAA;IAAAC,MAAA;IAAAC,QAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;MAAA,IAAAD,EAAA;QCb/B1C,EAAA,CAAAC,cAAA,eAAkB;QAGND,EAAA,CAAAE,MAAA,WAAI;QAAAF,EAAA,CAAAG,YAAA,EAAK;QACbH,EAAA,CAAAC,cAAA,SAAI;QAAAD,EAAA,CAAAE,MAAA,kBAAW;QAAAF,EAAA,CAAAG,YAAA,EAAK;QAGxBH,EAAA,CAAAC,cAAA,YAAO;QACLD,EAAA,CAAA4C,UAAA,IAAAC,gCAAA,gBAGK;QACP7C,EAAA,CAAAG,YAAA,EAAQ;;;QAJgBH,EAAA,CAAAS,SAAA,GAAa;QAAbT,EAAA,CAAAI,UAAA,YAAAuC,GAAA,CAAA5B,UAAA,CAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}